{"version":3,"file":"static/js/545.976a8fc1.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Container/Container.module.css?9f71","components/Container/Container.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/Contacts/Contacts.module.css?fb9d","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForrm.module.css?2899","redux/selectors.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__VVOCq\"};","import css from './Container.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Container({ children }) {\n  return <div className={css.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main__title\":\"Contacts_main__title__mM0Uc\",\"secondary__title\":\"Contacts_secondary__title__9lHXl\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact__label\":\"ContactForrm_contact__label__Cvfny\",\"contact__input\":\"ContactForrm_contact__input__deCLS\",\"contact__button\":\"ContactForrm_contact__button__5RUe3\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import PropTypes from 'prop-types';\nimport css from './ContactForrm.module.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formData = data => {\n    const equalName = contacts.find(\n      el => el.name.toLowerCase() === data.name.toLowerCase()\n    );\n    const equalNumber = contacts.find(\n      el => el.number.toLowerCase() === data.number.toLowerCase()\n    );\n\n    if (equalName)\n      return toast.warning(\n        `This name ${equalName.name} is already in contacts.`\n      );\n    if (equalNumber)\n      return toast.warning(\n        `This number ${equalNumber.number} is already in contacts and belongs to ${equalNumber.name}.`\n      );\n\n    dispatch(addContact(data));\n  };\n\n  const handleSubmit = (values, action) => {\n    formData(values);\n    action.resetForm();\n  };\n\n  return (\n    <>\n      <Formik initialValues={{ name: '', number: '' }} onSubmit={handleSubmit}>\n        <Form>\n          <label className={css.contact__label}>\n            Name\n            <Field\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              className={css.contact__input}\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </label>\n          <label className={css.contact__label}>\n            Number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              className={css.contact__input}\n            />\n          </label>\n          <ErrorMessage name=\"number\" component=\"div\" />\n          <button type=\"submit\" className={css.contact__button}>\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  handleSubmit: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"ContactList_contact__list__2jNwc\",\"contact__item\":\"ContactList_contact__item__PFoNH\",\"contact__list__text\":\"ContactList_contact__list__text__eLHjv\",\"text__color\":\"ContactList_text__color__9HoZn\",\"contact__list__button\":\"ContactList_contact__list__button__fNqL-\"};","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { deleteContact } from 'redux/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const getVisibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul className={css.contact__list}>\n      {getVisibleContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contact__item}>\n          <div>\n            <p className={css.contact__list__text}>{name}</p>\n            <p className={css.text__color}>tel: {number}</p>\n          </div>\n          <button\n            type=\"button\"\n            className={css.contact__list__button}\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.propeTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  filterValue: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filtersSlice';\nimport debounce from 'lodash.debounce';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  const delayedOnChange = debounce(onChange, 300);\n\n  return (\n    <label className={css.filter__label}>\n      Find contact by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter name for Search\"\n        className={css.filter__input}\n        onChange={delayedOnChange}\n      />\n    </label>\n  );\n};\nexport default Filter;\n\nFilter.propeTypes = {\n  value: PropTypes.string,\n  delayedOnChange: PropTypes.func,\n};\n","import css from './Contacts.module.css';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Container from 'components/Container/Container';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { Dna } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from 'hooks';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectError);\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Container>\n        {isError && toast.error(isError)}\n        <h1 className={css.main__title}>Phonebook {user.name}</h1>\n        <ContactForm />\n        {contacts.length ? (\n          <div>\n            <h2 className={css.secondary__title}>Contacts</h2>\n            <>\n              {isLoading ? (\n                <Dna\n                  visible={true}\n                  height=\"200\"\n                  width=\"200\"\n                  ariaLabel=\"dna-loading\"\n                  wrapperStyle={{\n                    position: 'fixed',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                  }}\n                  wrapperClass=\"dna-wrapper\"\n                />\n              ) : (\n                <>\n                  <Filter />\n                  <ContactList />\n                </>\n              )}\n            </>\n          </div>\n        ) : (\n          <h2 className={css.secondary__title}>No any contacts</h2>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Container","children","className","css","selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","dispatch","useDispatch","useSelector","initialValues","number","onSubmit","values","action","data","equalName","find","el","equalNumber","toast","addContact","formData","resetForm","type","placeholder","pattern","title","required","component","ContactList","getVisibleContacts","map","id","onClick","deleteContact","propeTypes","onDeleteContact","PropTypes","isRequired","filterValue","Filter","delayedOnChange","debounce","e","value","target","setFilter","onChange","isError","user","useAuth","useEffect","fetchContacts","Helmet","length","visible","height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass"],"sourceRoot":""}